package main

import (
	"bytes"
	"context"
	"crypto/rand"
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"os"
	"strconv"
	"time"
)

type Message struct {
	ID   int    `json:"id,omitempty"`
	Text string `json:"text,omitempty"`
}

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ Task —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
type Task struct {
	ID       int       `json:"id,omitempty"`
	StreamID string    `json:"stream_id"`
	Name     string    `json:"name"`
	UserID   int       `json:"user_id,omitempty"`  // ‚úÖ –ù–û–í–û–ï –ü–û–õ–ï
	Username string    `json:"username,omitempty"` // ‚úÖ –ù–û–í–û–ï –ü–û–õ–ï
	Created  time.Time `json:"created,omitempty"`
	Updated  time.Time `json:"updated,omitempty"`
	Status   string    `json:"status"`
}

// –ê–¥—Ä–µ—Å stream-app –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
var streamAppURL = fmt.Sprintf("http://%s:%s", os.Getenv("STREAMAPP_HOST"), os.Getenv("STREAMAPP_PORT"))

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è StreamID: —Å–ª—É—á–∞–π–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –∏–∑ —Ü–∏—Ñ—Ä, –±—É–∫–≤ –∏ –¥–µ—Ñ–∏—Å–æ–≤
func generateStreamID() (string, error) {
	const letters = "abcdefghijklmnopqrstuvwxyz0123456789-"
	const length = 12
	bytes := make([]byte, length)
	_, err := rand.Read(bytes)
	if err != nil {
		return "", err
	}
	for i := 0; i < length; i++ {
		bytes[i] = letters[int(bytes[i])%len(letters)]
	}
	return fmt.Sprintf("%s%s-%s-%s", string(bytes[0:3]), string(bytes[3:6]), string(bytes[6:9]), string(bytes[9:12])), nil
}

// –•—ç–Ω–¥–ª–µ—Ä—ã –¥–ª—è –∑–∞–¥–∞—á (tasks)
func GetTasksHandler(w http.ResponseWriter, r *http.Request) {
	// ‚úÖ –î–û–ë–ê–í–õ–ï–ù–ê –ü–û–î–î–ï–†–ñ–ö–ê –§–ò–õ–¨–¢–†–ê–¶–ò–ò –ü–û STREAM_ID
	streamIDFilter := r.URL.Query().Get("stream_id")

	var query string
	var args []interface{}

	if streamIDFilter != "" {
		query = "SELECT id, streamid, name, user_id, username, created, updated, status FROM Tasks WHERE streamid = $1"
		args = append(args, streamIDFilter)
		log.Printf("üìã Filtering tasks by stream_id: %s", streamIDFilter)
	} else {
		query = "SELECT id, streamid, name, user_id, username, created, updated, status FROM Tasks ORDER BY created DESC"
	}

	rows, err := db.Query(context.Background(), query, args...)
	if err != nil {
		log.Printf("‚ùå Failed to fetch tasks: %v", err)
		http.Error(w, "Failed to fetch tasks", http.StatusInternalServerError)
		return
	}
	defer rows.Close()

	var tasks []Task
	for rows.Next() {
		var t Task
		if err := rows.Scan(&t.ID, &t.StreamID, &t.Name, &t.UserID, &t.Username, &t.Created, &t.Updated, &t.Status); err != nil {
			log.Printf("‚ùå Error scanning task: %v", err)
			http.Error(w, "Error scanning task", http.StatusInternalServerError)
			return
		}
		tasks = append(tasks, t)
	}

	if streamIDFilter != "" {
		log.Printf("üìä Found %d tasks for stream_id: %s", len(tasks), streamIDFilter)
	}

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(tasks)
}

func CreateTaskHandler(w http.ResponseWriter, r *http.Request) {
	var t Task
	if err := json.NewDecoder(r.Body).Decode(&t); err != nil {
		http.Error(w, "Invalid request body", http.StatusBadRequest)
		return
	}
	if t.Name == "" {
		http.Error(w, "Missing task name", http.StatusBadRequest)
		return
	}

	streamID, err := generateStreamID()
	if err != nil {
		http.Error(w, "Failed to generate streamID", http.StatusInternalServerError)
		return
	}
	t.StreamID = streamID
	t.Status = "stopped"

	err = db.QueryRow(context.Background(),
		`INSERT INTO Tasks (streamid, name, status) VALUES ($1, $2, $3) RETURNING id, created, updated`,
		t.StreamID, t.Name, t.Status).Scan(&t.ID, &t.Created, &t.Updated)
	if err != nil {
		http.Error(w, "Failed to create task", http.StatusInternalServerError)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusCreated)
	json.NewEncoder(w).Encode(t)
}

func UpdateTaskHandler(w http.ResponseWriter, r *http.Request) {
	idStr := r.URL.Query().Get("id")
	if idStr == "" {
		http.Error(w, "Missing id parameter", http.StatusBadRequest)
		return
	}
	id, err := strconv.Atoi(idStr)
	if err != nil {
		http.Error(w, "Invalid id parameter", http.StatusBadRequest)
		return
	}

	var req struct {
		Status string `json:"status"`
	}
	if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
		http.Error(w, "Invalid request body", http.StatusBadRequest)
		return
	}
	if !isValidStatus(req.Status) {
		http.Error(w, "Invalid status value", http.StatusBadRequest)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º stream_id –∑–∞–¥–∞—á–∏ –∏–∑ –±–∞–∑—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è stream-app
	var streamID string
	err = db.QueryRow(context.Background(), "SELECT streamid FROM Tasks WHERE id=$1", id).Scan(&streamID)
	if err != nil {
		http.Error(w, "Task not found", http.StatusNotFound)
		return
	}

	cmdTag, err := db.Exec(context.Background(),
		`UPDATE Tasks SET status=$1, updated=NOW() WHERE id=$2`,
		req.Status, id)
	if err != nil {
		http.Error(w, "Failed to update task", http.StatusInternalServerError)
		return
	}
	if cmdTag.RowsAffected() == 0 {
		http.Error(w, "Task not found", http.StatusNotFound)
		return
	}

	// –£–≤–µ–¥–æ–º–ª—è–µ–º stream-app –æ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞
	if err := notifyStreamApp(streamID, req.Status, id); err != nil {
		log.Printf("Failed to notify stream-app: %v", err)
		// –ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
	}

	w.WriteHeader(http.StatusNoContent)
}

func DeleteTaskHandler(w http.ResponseWriter, r *http.Request) {
	idStr := r.URL.Query().Get("id")
	if idStr == "" {
		http.Error(w, "Missing id parameter", http.StatusBadRequest)
		return
	}

	id, err := strconv.Atoi(idStr)
	if err != nil {
		http.Error(w, "Invalid id parameter", http.StatusBadRequest)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º streamID –∏ —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
	var streamID, status string
	err = db.QueryRow(context.Background(),
		"SELECT streamid, status FROM Tasks WHERE id=$1", id).Scan(&streamID, &status)
	if err != nil {
		http.Error(w, "Task not found", http.StatusNotFound)
		return
	}

	// –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –∞–∫—Ç–∏–≤–Ω–∞, —Å–Ω–∞—á–∞–ª–∞ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç—Ä–∏–º
	if status == "waiting" || status == "running" {
		log.Printf("Stopping active stream %s before deletion", streamID)
		if err := notifyStreamApp(streamID, "stopped", id); err != nil {
			log.Printf("Failed to stop stream before deletion: %v", err)
		}
		time.Sleep(2 * time.Second) // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É
	}

	// –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
	cmdTag, err := db.Exec(context.Background(), "DELETE FROM Tasks WHERE id=$1", id)
	if err != nil {
		http.Error(w, "Failed to delete task", http.StatusInternalServerError)
		return
	}
	if cmdTag.RowsAffected() == 0 {
		http.Error(w, "Task not found", http.StatusNotFound)
		return
	}

	// –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –¢–û–õ–¨–ö–û –ª–æ–∫–∞–ª—å–Ω–æ–π –ø–∞–ø–∫–∏ –≤ stream-app –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
	if err := notifyStreamAppCleanupFolder(streamID); err != nil {
		log.Printf("Failed to request folder cleanup for stream %s: %v", streamID, err)
	}

	log.Printf("Deleted task %d and requested local folder cleanup for stream %s", id, streamID)
	w.WriteHeader(http.StatusNoContent)
}

// –§—É–Ω–∫—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è stream-app –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ª–æ–∫–∞–ª—å–Ω–æ–π –ø–∞–ø–∫–∏
func notifyStreamAppCleanupFolder(streamID string) error {
	payload := map[string]string{
		"stream_id": streamID,
		"action":    "cleanup_folder",
	}

	jsonData, err := json.Marshal(payload)
	if err != nil {
		return fmt.Errorf("failed to marshal cleanup payload: %v", err)
	}

	url := "http://stream-app:9090/stream/cleanup"
	req, err := http.NewRequest(http.MethodPost, url, bytes.NewBuffer(jsonData))
	if err != nil {
		return fmt.Errorf("failed to create cleanup request: %v", err)
	}
	req.Header.Set("Content-Type", "application/json")

	client := &http.Client{Timeout: 10 * time.Second}
	resp, err := client.Do(req)
	if err != nil {
		return fmt.Errorf("failed to send cleanup request: %v", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode >= 400 {
		return fmt.Errorf("cleanup request failed with status %d", resp.StatusCode)
	}

	log.Printf("Successfully requested local folder cleanup for stream %s", streamID)
	return nil
}

func isValidStatus(s string) bool {
	switch s {
	case "stopped", "waiting", "running", "error":
		return true
	default:
		return false
	}
}

// ‚úÖ –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ø–µ—Ä–µ–¥–∞—á–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ stream-app
func notifyStreamAppWithUserInfo(streamID, status string, taskID int, userID int, username, title string) error {
	notification := map[string]interface{}{
		"stream_id": streamID,
		"status":    status,
		"task_id":   taskID,
		"user_id":   userID,   // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û
		"username":  username, // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û
		"title":     title,    // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û
	}

	jsonData, err := json.Marshal(notification)
	if err != nil {
		return err
	}

	client := &http.Client{Timeout: 5 * time.Second}
	resp, err := client.Post("http://stream-app:9090/stream/notify", "application/json", bytes.NewBuffer(jsonData))
	if err != nil {
		return err
	}
	defer resp.Body.Close()

	if resp.StatusCode >= 400 {
		return fmt.Errorf("stream-app returned status %s", resp.Status)
	}

	log.Printf("‚úÖ Notified stream-app: %s -> %s (user: %s, id: %d)", streamID, status, username, userID)
	return nil
}

// –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ä—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
func notifyStreamApp(streamID, status string, taskID int) error {
	return notifyStreamAppWithUserInfo(streamID, status, taskID, 0, "legacy", fmt.Sprintf("Legacy task %d", taskID))
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ –ø–æ StreamID (–¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç stream-app)
func UpdateTaskStatusByStreamHandler(w http.ResponseWriter, r *http.Request) {
	if r.Method != http.MethodPut {
		http.Error(w, "Method not allowed", http.StatusMethodNotAllowed)
		return
	}

	var req struct {
		StreamID string `json:"stream_id"`
		Status   string `json:"status"`
	}
	if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
		http.Error(w, "Invalid request body", http.StatusBadRequest)
		return
	}

	if !isValidStatus(req.Status) {
		http.Error(w, "Invalid status value", http.StatusBadRequest)
		return
	}

	cmdTag, err := db.Exec(context.Background(),
		`UPDATE Tasks SET status=$1, updated=NOW() WHERE streamid=$2`,
		req.Status, req.StreamID)
	if err != nil {
		http.Error(w, "Failed to update task", http.StatusInternalServerError)
		return
	}
	if cmdTag.RowsAffected() == 0 {
		http.Error(w, "Task not found", http.StatusNotFound)
		return
	}

	log.Printf("Updated task status to %s for stream %s", req.Status, req.StreamID)
	w.WriteHeader(http.StatusNoContent)
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á (waiting/running) –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –≤ stream-app
func GetActiveTasksHandler(w http.ResponseWriter, r *http.Request) {
	if r.Method != http.MethodGet {
		http.Error(w, "Method not allowed", http.StatusMethodNotAllowed)
		return
	}

	rows, err := db.Query(context.Background(),
		"SELECT id, streamid, name, status FROM Tasks WHERE status IN ('waiting', 'running')")
	if err != nil {
		http.Error(w, "Failed to fetch active tasks", http.StatusInternalServerError)
		return
	}
	defer rows.Close()

	var tasks []Task
	for rows.Next() {
		var t Task
		if err := rows.Scan(&t.ID, &t.StreamID, &t.Name, &t.Status); err != nil {
			http.Error(w, "Error scanning task", http.StatusInternalServerError)
			return
		}
		tasks = append(tasks, t)
	}

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(tasks)
}
