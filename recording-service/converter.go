package main

import (
	"bytes"
	"fmt"
	"log"
	"os"
	"os/exec"
	"path/filepath"
	"strconv"
	"strings"
)

func convertHLSToMP4(task RecordingTask) ProcessingResult {
	log.Printf("üîÑ Starting HLS‚ÜíMP4 conversion for: %s", task.StreamID)

	// ‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å StorageManager –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è HLS
	tempHLSDir, err := storageManager.DownloadHLSFiles(task.StreamID)
	if err != nil {
		return ProcessingResult{
			Success: false,
			Error:   fmt.Errorf("failed to download HLS files: %w", err),
		}
	}
	defer storageManager.CleanupHLSFiles(tempHLSDir) // ‚úÖ –û—á–∏—Å—Ç–∫–∞ —á–µ—Ä–µ–∑ StorageManager

	// ‚úÖ –ü–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ –ø–ª–µ–π–ª–∏—Å—Ç—É —á–µ—Ä–µ–∑ StorageManager
	hlsPlaylist, err := storageManager.GetHLSPlaylistPath(tempHLSDir)
	if err != nil {
		return ProcessingResult{
			Success: false,
			Error:   fmt.Errorf("HLS playlist not found: %w", err),
		}
	}

	// –ü—É—Ç–∏ –¥–ª—è –≤—ã—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
	outputMP4 := fmt.Sprintf("/tmp/%s.mp4", task.StreamID)
	outputThumb := fmt.Sprintf("/tmp/%s.jpg", task.StreamID)

	// ‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è (—á–∏—Å—Ç–∞—è FFmpeg –ª–æ–≥–∏–∫–∞)
	if err := convertToMP4(hlsPlaylist, outputMP4); err != nil {
		return ProcessingResult{
			Success: false,
			Error:   fmt.Errorf("MP4 conversion failed: %w", err),
		}
	}

	// ‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è thumbnail
	generateThumbnail(outputMP4, outputThumb)

	// ‚úÖ –ü–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
	fileSize, err := getFileSize(outputMP4)
	if err != nil {
		return ProcessingResult{
			Success: false,
			Error:   fmt.Errorf("could not get file size: %w", err),
		}
	}

	log.Printf("‚úÖ Conversion completed: %s (size: %d bytes)", task.StreamID, fileSize)

	return ProcessingResult{
		Success:       true,
		MP4Path:       outputMP4,
		ThumbnailPath: outputThumb,
		FileSize:      fileSize,
		Error:         nil,
	}
}

func convertToMP4(hlsPlaylist, outputMP4 string) error {
	log.Printf("üìã Analyzing HLS playlist: %s", hlsPlaylist)

	// ‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞
	if err := validateHLSPlaylist(hlsPlaylist); err != nil {
		return fmt.Errorf("invalid HLS playlist: %w", err)
	}

	// ‚úÖ –£–ª—É—á—à–µ–Ω–Ω–∞—è FFmpeg –∫–æ–º–∞–Ω–¥–∞ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
	ffmpegCmd := exec.Command("ffmpeg",
		"-loglevel", "info", // –î–µ—Ç–∞–ª—å–Ω—ã–µ –ª–æ–≥–∏
		"-i", hlsPlaylist,
		"-c:v", "libx264", // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ
		"-c:a", "aac", // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ
		"-preset", "fast", // –ë—ã—Å—Ç—Ä–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
		"-crf", "23", // –ö–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ
		"-movflags", "+faststart", // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è –≤–µ–±
		"-f", "mp4", // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç MP4
		"-y", // –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å —Ñ–∞–π–ª
		outputMP4,
	)

	log.Printf("üîß Running FFmpeg: %v", ffmpegCmd.Args)

	// ‚úÖ –ó–∞—Ö–≤–∞—Ç–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥
	var stdout, stderr bytes.Buffer
	ffmpegCmd.Stdout = &stdout
	ffmpegCmd.Stderr = &stderr

	err := ffmpegCmd.Run()

	// ‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –≤–µ—Å—å –≤—ã–≤–æ–¥ FFmpeg
	if stdout.Len() > 0 {
		log.Printf("FFmpeg stdout: %s", stdout.String())
	}
	if stderr.Len() > 0 {
		log.Printf("FFmpeg stderr: %s", stderr.String())
	}

	if err != nil {
		return fmt.Errorf("FFmpeg failed: %v, stderr: %s", err, stderr.String())
	}

	// ‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–∑–º–µ—Ä –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
	if err := validateOutputMP4(outputMP4); err != nil {
		return fmt.Errorf("output MP4 validation failed: %w", err)
	}

	log.Printf("‚úÖ FFmpeg conversion successful")
	return nil
}

// ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è HLS –ø–ª–µ–π–ª–∏—Å—Ç–∞
func validateHLSPlaylist(playlistPath string) error {
	content, err := os.ReadFile(playlistPath)
	if err != nil {
		return fmt.Errorf("cannot read playlist: %w", err)
	}

	playlistStr := string(content)
	log.Printf("üìÑ HLS Playlist content:\n%s", playlistStr)

	// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–∑–æ–≤—ã–µ HLS —ç–ª–µ–º–µ–Ω—Ç—ã
	if !strings.Contains(playlistStr, "#EXTM3U") {
		return fmt.Errorf("invalid HLS playlist: missing #EXTM3U header")
	}

	// –ü–æ–¥—Å—á–∏—Ç–∞—Ç—å —Å–µ–≥–º–µ–Ω—Ç—ã
	segmentCount := strings.Count(playlistStr, ".ts")
	if segmentCount == 0 {
		return fmt.Errorf("no .ts segments found in playlist")
	}

	log.Printf("üìä Found %d segments in playlist", segmentCount)

	// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ —Ñ–∞–π–ª—ã —Å–µ–≥–º–µ–Ω—Ç–æ–≤ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
	playlistDir := filepath.Dir(playlistPath)
	lines := strings.Split(playlistStr, "\n")

	validSegments := 0
	for _, line := range lines {
		line = strings.TrimSpace(line)
		if strings.HasSuffix(line, ".ts") {
			segmentPath := filepath.Join(playlistDir, line)
			if stat, err := os.Stat(segmentPath); err == nil && stat.Size() > 0 {
				validSegments++
				log.Printf("üì¶ Valid segment: %s (%d bytes)", line, stat.Size())
			} else {
				log.Printf("‚ö†Ô∏è Missing/empty segment: %s", line)
			}
		}
	}

	if validSegments == 0 {
		return fmt.Errorf("no valid .ts segments found on disk")
	}

	log.Printf("‚úÖ Validated %d/%d segments", validSegments, segmentCount)
	return nil
}

// ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ MP4
func validateOutputMP4(mp4Path string) error {
	stat, err := os.Stat(mp4Path)
	if err != nil {
		return fmt.Errorf("output file not created: %s", mp4Path)
	}

	if stat.Size() == 0 {
		return fmt.Errorf("output MP4 file is empty: %s", mp4Path)
	}

	if stat.Size() < 1024 { // –ú–µ–Ω–µ–µ 1KB –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ
		log.Printf("‚ö†Ô∏è Output MP4 is very small: %d bytes", stat.Size())
	}

	// ‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å MP4 —Å –ø–æ–º–æ—â—å—é ffprobe
	probeCmd := exec.Command("ffprobe",
		"-v", "quiet",
		"-print_format", "json",
		"-show_format",
		"-show_streams",
		mp4Path,
	)

	output, err := probeCmd.Output()
	if err != nil {
		return fmt.Errorf("ffprobe validation failed: %w", err)
	}

	log.Printf("üìã FFprobe output: %s", string(output))

	// –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –µ—Å—Ç—å streams
	if !strings.Contains(string(output), `"streams"`) {
		return fmt.Errorf("no streams found in output MP4")
	}

	log.Printf("‚úÖ Output MP4 validated: %d bytes", stat.Size())
	return nil
}

func generateThumbnail(inputMP4, outputThumb string) {
	duration := getVideoDuration(inputMP4)

	var seekTime string
	if duration > 10 {
		seekTime = strconv.Itoa(duration / 2)
	} else {
		seekTime = "2"
	}

	thumbCmd := exec.Command("ffmpeg",
		"-i", inputMP4,
		"-ss", seekTime,
		"-vframes", "1",
		"-vf", "scale=480:360",
		"-q:v", "2",
		"-y",
		outputThumb,
	)

	log.Printf("üñºÔ∏è Generating thumbnail at %ss...", seekTime)

	if _, err := thumbCmd.CombinedOutput(); err != nil {
		log.Printf("‚ö†Ô∏è Thumbnail generation failed: %v", err)
		if file, err := os.Create(outputThumb); err == nil {
			file.Close()
		}
	} else {
		log.Printf("‚úÖ Thumbnail generated successfully")
	}
}

func getVideoDuration(videoPath string) int {
	cmd := exec.Command("ffprobe",
		"-v", "quiet",
		"-select_streams", "v:0",
		"-show_entries", "stream=duration",
		"-of", "csv=p=0",
		videoPath,
	)

	output, err := cmd.Output()
	if err != nil {
		return 30
	}

	durationStr := strings.TrimSpace(string(output))
	if duration, err := strconv.ParseFloat(durationStr, 64); err == nil {
		return int(duration)
	}

	return 30
}

func getFileSize(filePath string) (int64, error) {
	fileInfo, err := os.Stat(filePath)
	if err != nil {
		return 0, err
	}
	return fileInfo.Size(), nil
}
