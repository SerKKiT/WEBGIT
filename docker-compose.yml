services:
  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: example
      POSTGRES_DB: appdb
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d appdb"]
      interval: 5s
      timeout: 5s
      retries: 5

  # ✅ БД для Recording Service
  recording-postgres:
    image: postgres:15
    container_name: recording-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: example
      POSTGRES_DB: recording_db
    ports:
      - "5433:5432"
    networks:
      - app-network
    volumes:
      - recording_postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d recording_db"]
      interval: 5s
      timeout: 5s
      retries: 5

  minio:
    image: minio/minio:latest
    container_name: minio
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    networks:
      - app-network
    command: server /data --console-address ":9001"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "bash", "-c", "echo 'ruok' | nc localhost 2181"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    hostname: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:29092"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # ✅ Main App без auth интеграции
  main-app:
    build: ./main-app
    container_name: main-app
    ports:
      - "8080:8080"
    environment:
      - PORT=8080
      - DATABASE_URL=postgres://postgres:example@postgres:5432/appdb?sslmode=disable
      # ✅ НОВЫЕ: Auth интеграция
      - AUTH_SERVICE_URL=http://auth-service:8082
      - SERVICE_API_KEY=dev-service-api-key-for-local-testing
    networks:
      - app-network
    depends_on:
      postgres:
        condition: service_healthy
      auth-service:  # ✅ НОВАЯ ЗАВИСИМОСТЬ
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "nc -z localhost 8080 || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 3
      start_period: 5s

  stream-app:
    build: ./stream-app
    ports:
      - "9090:9090"
      - "10000-10100:10000-10100/udp"
    volumes:
      - ./hls:/app/hls
    environment:
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin123
      - MINIO_BUCKET=hls-streams
      - MINIO_USE_SSL=false
      - KAFKA_BROKERS=kafka:29092
    networks:
      - app-network
    depends_on:
      main-app:
        condition: service_started
      minio:
        condition: service_healthy
      kafka:
        condition: service_healthy
    restart: unless-stopped

  # ✅ Recording-service без auth интеграции
  recording-service:
    build: ./recording-service
    environment:
      - KAFKA_BROKERS=kafka:29092
      - DATABASE_URL=postgres://postgres:example@recording-postgres:5432/recording_db?sslmode=disable
      - DB_HOST=recording-postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=example
      - DB_NAME=recording_db
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin123
      - MINIO_BUCKET=recordings
      - MINIO_HLS_BUCKET=hls-streams
    networks:
      - app-network
    depends_on:
      kafka:
        condition: service_healthy
      recording-postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
    volumes:
      - ./hls:/app/hls:ro
    restart: unless-stopped

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/proxy_params:/etc/nginx/proxy_params:ro
      - ./frontend/dist:/usr/share/nginx/html:ro  # Статические файлы
    depends_on:
      - main-app
      - stream-app
    networks:
      - app-network
    restart: unless-stopped

  # ✅ VOD-service без auth интеграции
  vod-service:
    build:
      context: .
      dockerfile: vod-service/Dockerfile
    container_name: vod-service
    ports:
      - "8081:8081"
    environment:
      - PORT=8081
      - DATABASE_URL=postgres://postgres:example@recording-postgres:5432/recording_db?sslmode=disable
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin123
      - MINIO_BUCKET=recordings
      # ✅ НОВЫЕ ПЕРЕМЕННЫЕ ДЛЯ AUTH ИНТЕГРАЦИИ
      - AUTH_SERVICE_URL=http://auth-service:8082
      - SERVICE_API_KEY=dev-service-api-key-for-local-testing
    networks:
      - app-network
    depends_on:
      recording-postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
      auth-service:           # ✅ ДОБАВЛЕНА ЗАВИСИМОСТЬ от auth-service
        condition: service_healthy
    restart: unless-stopped

   # Auth Service v2 - отдельная авторизация
  auth-service:
    build:
      context: .
      dockerfile: auth-service/Dockerfile
    container_name: auth-service
    ports:
      - "8082:8082"
    environment:
      - DB_HOST=auth-postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=auth_db
      - JWT_SECRET=${JWT_SECRET:-super-secret-jwt-key-change-in-production}
      - SERVICE_API_KEY=dev-service-api-key-for-local-testing
      - PORT=8082
    networks:
      - app-network
    depends_on:
      auth-postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/health"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Auth PostgreSQL - НОВЫЙ ПОРТ 5435
  auth-postgres:
    image: postgres:15-alpine
    container_name: auth-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: auth_db
    ports:
      - "5435:5432"  # ✅ ИЗМЕНЕНО: 5435 вместо 5433
    volumes:
      - auth_postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d auth_db"]
      interval: 5s
      timeout: 5s
      retries: 5


volumes:
  postgres_data:
  minio_data:
  recording_postgres_data:
  auth_postgres_data:  # ✅ Добавляем volume для auth-postgres

networks:
  app-network:
    driver: bridge
