stages:
  - build
  - deploy

variables:
  DOCKER_DRIVER: overlay2

# Убираем services для shell runner
# services:
#   - docker:24-dind

before_script:
  - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

build:
  stage: build
  tags:
    - shell  # Указываем тег для shell runner
  script:
    # Сборка всех custom образов
    - docker build -t $CI_REGISTRY_IMAGE/main-app:$CI_COMMIT_SHA ./main-app
    - docker build -t $CI_REGISTRY_IMAGE/stream-app:$CI_COMMIT_SHA ./stream-app  
    - docker build -t $CI_REGISTRY_IMAGE/recording-service:$CI_COMMIT_SHA ./recording-service
    
    # Пуш в GitLab Registry
    - docker push $CI_REGISTRY_IMAGE/main-app:$CI_COMMIT_SHA
    - docker push $CI_REGISTRY_IMAGE/stream-app:$CI_COMMIT_SHA
    - docker push $CI_REGISTRY_IMAGE/recording-service:$CI_COMMIT_SHA
    
    # Создание latest тегов для master/main ветки
    - |
      if [ "$CI_COMMIT_REF_NAME" = "main" ] || [ "$CI_COMMIT_REF_NAME" = "master" ]; then
        docker tag $CI_REGISTRY_IMAGE/main-app:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE/main-app:latest
        docker tag $CI_REGISTRY_IMAGE/stream-app:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE/stream-app:latest
        docker tag $CI_REGISTRY_IMAGE/recording-service:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE/recording-service:latest
        
        docker push $CI_REGISTRY_IMAGE/main-app:latest
        docker push $CI_REGISTRY_IMAGE/stream-app:latest
        docker push $CI_REGISTRY_IMAGE/recording-service:latest
      fi
  after_script:
    # Очистка локальных образов после сборки
    - docker image prune -f
    - docker system prune -f --volumes

deploy:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan $SERVER_HOST >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    # Копирование файлов на сервер
    - scp -r docker-compose.prod.yml nginx/ $SERVER_USER@$SERVER_HOST:$DEPLOY_PATH/
    
    # Деплой на сервере
    - |
      ssh $SERVER_USER@$SERVER_HOST "
        cd $DEPLOY_PATH &&
        echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY &&
        export IMAGE_TAG=$CI_COMMIT_SHA &&
        docker-compose -f docker-compose.prod.yml down &&
        docker-compose -f docker-compose.prod.yml pull &&
        docker-compose -f docker-compose.prod.yml up -d &&
        docker image prune -f
      "
  only:
    - main
    - master
  when: manual
