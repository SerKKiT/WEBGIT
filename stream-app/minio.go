package main

import (
	"context"
	"fmt"
	"log"
	"os"
	"path/filepath"
	"sort"
	"strings"
	"time"

	"github.com/minio/minio-go/v7"
	"github.com/minio/minio-go/v7/pkg/credentials"
)

var (
	minioClient *minio.Client
	minioBucket string
)

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MinIO –∫–ª–∏–µ–Ω—Ç–∞
func initMinIO() error {
	endpoint := os.Getenv("MINIO_ENDPOINT")
	if endpoint == "" {
		endpoint = "minio:9000"
	}

	accessKey := os.Getenv("MINIO_ACCESS_KEY")
	if accessKey == "" {
		accessKey = "minioadmin"
	}

	secretKey := os.Getenv("MINIO_SECRET_KEY")
	if secretKey == "" {
		secretKey = "minioadmin123"
	}

	minioBucket = os.Getenv("MINIO_BUCKET")
	if minioBucket == "" {
		minioBucket = "hls-streams"
	}

	useSSL := os.Getenv("MINIO_USE_SSL") == "true"

	var err error
	minioClient, err = minio.New(endpoint, &minio.Options{
		Creds:  credentials.NewStaticV4(accessKey, secretKey, ""),
		Secure: useSSL,
	})
	if err != nil {
		return fmt.Errorf("failed to initialize MinIO client: %v", err)
	}

	// –°–æ–∑–¥–∞–µ–º –±–∞–∫–µ—Ç –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
	ctx := context.Background()
	exists, err := minioClient.BucketExists(ctx, minioBucket)
	if err != nil {
		return fmt.Errorf("failed to check bucket existence: %v", err)
	}

	if !exists {
		err = minioClient.MakeBucket(ctx, minioBucket, minio.MakeBucketOptions{})
		if err != nil {
			return fmt.Errorf("failed to create bucket: %v", err)
		}
		log.Printf("MinIO bucket '%s' created successfully", minioBucket)
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª–∏—Ç–∏–∫—É –¥–ª—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è HLS —Ñ–∞–π–ª–æ–≤
	policy := fmt.Sprintf(`{
        "Version": "2012-10-17",
        "Statement": [
            {
                "Effect": "Allow",
                "Principal": {"AWS": "*"},
                "Action": "s3:GetObject",
                "Resource": "arn:aws:s3:::%s/*"
            }
        ]
    }`, minioBucket)

	err = minioClient.SetBucketPolicy(ctx, minioBucket, policy)
	if err != nil {
		log.Printf("Warning: failed to set bucket policy: %v", err)
	}

	log.Printf("MinIO initialized successfully with bucket: %s", minioBucket)
	return nil
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –≤ MinIO
// –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –≤ MinIO —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
func uploadToMinIO(streamID, localFilePath, objectName string) error {
	if minioClient == nil {
		return fmt.Errorf("MinIO client not initialized")
	}

	ctx := context.Background()
	objectPath := fmt.Sprintf("%s/%s", streamID, objectName)

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º Content-Type
	contentType := "application/octet-stream"
	if strings.HasSuffix(objectName, ".m3u8") {
		contentType = "application/vnd.apple.mpegurl"
	} else if strings.HasSuffix(objectName, ".ts") {
		contentType = "video/MP2T"
	}

	// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —á–∏—Ç–∞–µ—Ç—Å—è
	file, err := os.Open(localFilePath)
	if err != nil {
		return fmt.Errorf("failed to open file %s: %v", localFilePath, err)
	}
	defer file.Close()

	stat, err := file.Stat()
	if err != nil {
		return fmt.Errorf("failed to get file stats: %v", err)
	}

	if stat.Size() == 0 {
		return fmt.Errorf("file is empty: %s", localFilePath)
	}

	// –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ MinIO
	info, err := minioClient.PutObject(ctx, minioBucket, objectPath, file, stat.Size(), minio.PutObjectOptions{
		ContentType: contentType,
	})

	if err != nil {
		return fmt.Errorf("failed to upload to MinIO: %v", err)
	}

	// ‚úÖ –£–ë–†–ê–õ–ò –ò–ó–ë–´–¢–û–ß–ù–´–ô –õ–û–ì - —Ç–µ–ø–µ—Ä—å –ª–æ–≥–∏—Ä—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ uploadNewHLSFiles
	_ = info // –ò–∑–±–µ–≥–∞–µ–º unused variable warning
	return nil
}

// –û—á–∏—Å—Ç–∫–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö HLS —Å–µ–≥–º–µ–Ω—Ç–æ–≤, –æ—Å—Ç–∞–≤–ª—è—è –º–∞–∫—Å–∏–º—É–º maxChunks
func cleanupLocalHLSSegments(streamID string, maxChunks int) {
	hlsDir := filepath.Join("hls", streamID)

	entries, err := os.ReadDir(hlsDir)
	if err != nil {
		return
	}

	var tsFiles []os.FileInfo

	// –°–æ–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ .ts —Ñ–∞–π–ª—ã
	for _, entry := range entries {
		if entry.IsDir() || !strings.HasSuffix(entry.Name(), ".ts") {
			continue
		}

		info, err := entry.Info()
		if err != nil {
			continue
		}
		tsFiles = append(tsFiles, info)
	}

	// –ï—Å–ª–∏ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –Ω–µ –±–æ–ª—å—à–µ –ª–∏–º–∏—Ç–∞ - –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
	if len(tsFiles) <= maxChunks {
		return
	}

	// –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ (—Å—Ç–∞—Ä—ã–µ –≤ –Ω–∞—á–∞–ª–µ)
	sort.Slice(tsFiles, func(i, j int) bool {
		return tsFiles[i].ModTime().Before(tsFiles[j].ModTime())
	})

	// –£–¥–∞–ª—è–µ–º —Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã
	toDelete := tsFiles[:len(tsFiles)-maxChunks]

	for _, file := range toDelete {
		filePath := filepath.Join(hlsDir, file.Name())
		if err := os.Remove(filePath); err != nil {
			log.Printf("Failed to remove local HLS segment %s: %v", filePath, err)
		}
	}
}

// –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ HLS —Ñ–∞–π–ª–æ–≤ —Å –ª–æ–∫–∞–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–æ–π
// –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ HLS —Ñ–∞–π–ª–æ–≤ —Å –ª–æ–∫–∞–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–æ–π
// –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π HLS Uploader –±–µ–∑ —Å–ø–∞–º–∞
func startHLSUploader(streamID string) {
	log.Printf("üöÄ Starting optimized HLS uploader for stream: %s", streamID)

	hlsDir := filepath.Join("hls", streamID)
	maxLocalChunks := 8 // –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏–∏

	// –¢—Ä–µ–∫–∏–Ω–≥ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
	uploadedFiles := make(map[string]time.Time)
	lastPlaylistHash := ""

	go func() {
		log.Printf("üì° HLS uploader goroutine started for stream: %s", streamID)

		uploadCycle := 0

		for {
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –µ—â–µ —Å—Ç—Ä–∏–º
			streamsMux.Lock()
			_, exists := activeStreams[streamID]
			streamsMux.Unlock()

			if !exists {
				log.Printf("üõë Stopping HLS uploader for stream %s (stream not active)", streamID)
				// –§–∏–Ω–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
				uploadAllHLSFiles(streamID, hlsDir)
				break
			}

			uploadCycle++

			// ‚úÖ –£–ú–ù–ê–Ø –ó–ê–ì–†–£–ó–ö–ê - —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã
			newFilesCount := uploadNewHLSFiles(streamID, hlsDir, uploadedFiles, &lastPlaylistHash)

			// –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
			if newFilesCount > 0 {
				log.Printf("üìä HLS upload cycle #%d: %d new files uploaded for %s", uploadCycle, newFilesCount, streamID)
			}

			// –õ–æ–∫–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –∫–∞–∂–¥—ã–µ 10 —Ü–∏–∫–ª–æ–≤
			if uploadCycle%10 == 0 {
				cleanupLocalHLSSegments(streamID, maxLocalChunks)
				// –û—á–∏—Å—Ç–∫–∞ —Ç—Ä–µ–∫–∏–Ω–≥–∞ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤
				cleanupUploadedFilesTracker(uploadedFiles)
			}

			// ‚úÖ –£–í–ï–õ–ò–ß–ï–ù –ò–ù–¢–ï–†–í–ê–õ - –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥ –≤–º–µ—Å—Ç–æ 2
			time.Sleep(5 * time.Second)
		}

		log.Printf("‚úÖ HLS uploader stopped for stream %s", streamID)
	}()

	log.Printf("‚úÖ Optimized HLS uploader launched for stream: %s", streamID)
}

// ‚úÖ –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: —É–º–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
func uploadNewHLSFiles(streamID, hlsDir string, uploadedFiles map[string]time.Time, lastPlaylistHash *string) int {
	// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –ø–∞–ø–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
	if _, err := os.Stat(hlsDir); os.IsNotExist(err) {
		return 0 // –¢–∏—Ö–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º, –ø–∞–ø–∫–∞ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–ª–∞—Å—å
	}

	files, err := os.ReadDir(hlsDir)
	if err != nil {
		log.Printf("‚ùå Failed to read HLS directory %s: %v", hlsDir, err)
		return 0
	}

	if len(files) == 0 {
		return 0
	}

	uploadCount := 0

	for _, file := range files {
		if file.IsDir() {
			continue
		}

		fileName := file.Name()

		// –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
		if strings.HasSuffix(fileName, ".tmp") {
			continue
		}

		if !strings.HasSuffix(fileName, ".m3u8") && !strings.HasSuffix(fileName, ".ts") {
			continue
		}

		localPath := filepath.Join(hlsDir, fileName)

		// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
		fileInfo, err := os.Stat(localPath)
		if err != nil {
			continue
		}

		// ‚úÖ –£–ú–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–æ–≤—ã–π –∏–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è
		shouldUpload := false

		if strings.HasSuffix(fileName, ".ts") {
			// .ts —Å–µ–≥–º–µ–Ω—Ç—ã –∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
			if lastUploaded, exists := uploadedFiles[fileName]; !exists {
				shouldUpload = true
			} else if fileInfo.ModTime().After(lastUploaded) {
				shouldUpload = true
			}
		} else if strings.HasSuffix(fileName, ".m3u8") {
			// .m3u8 –∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
			currentHash := getFileHash(localPath)
			if currentHash != *lastPlaylistHash {
				shouldUpload = true
				*lastPlaylistHash = currentHash
			}
		}

		if !shouldUpload {
			continue // –¢–∏—Ö–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –±–µ–∑ –ª–æ–≥–æ–≤
		}

		// –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
		err = uploadToMinIO(streamID, localPath, fileName)
		if err != nil {
			log.Printf("‚ùå Failed to upload %s: %v", fileName, err)
			continue
		}

		// –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π
		uploadedFiles[fileName] = fileInfo.ModTime()
		uploadCount++

		// –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –∑–∞–≥—Ä—É–∑–∫–∏
		log.Printf("‚úÖ Uploaded new file: %s", fileName)
	}

	return uploadCount
}

// ‚úÖ –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ø–æ–ª—É—á–µ–Ω–∏–µ —Ö–µ—à–∞ —Ñ–∞–π–ª–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
func getFileHash(filePath string) string {
	file, err := os.Open(filePath)
	if err != nil {
		return ""
	}
	defer file.Close()

	// –ß–∏—Ç–∞–µ–º –ø–µ—Ä–≤—ã–µ 512 –±–∞–π—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
	buffer := make([]byte, 512)
	n, err := file.Read(buffer)
	if err != nil && n == 0 {
		return ""
	}

	// –ü—Ä–æ—Å—Ç–æ–π —Ö–µ—à –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
	stat, _ := file.Stat()
	return fmt.Sprintf("%d_%x", stat.Size(), buffer[:n])
}

// ‚úÖ –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –æ—á–∏—Å—Ç–∫–∞ —Ç—Ä–µ–∫–µ—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
func cleanupUploadedFilesTracker(uploadedFiles map[string]time.Time) {
	cutoff := time.Now().Add(-10 * time.Minute) // –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ —Å—Ç–∞—Ä—à–µ 10 –º–∏–Ω—É—Ç

	for fileName, uploadTime := range uploadedFiles {
		if uploadTime.Before(cutoff) {
			delete(uploadedFiles, fileName)
		}
	}
}

// ‚úÖ –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: uploadAllHLSFiles –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
func uploadAllHLSFiles(streamID, hlsDir string) {
	log.Printf("üîÑ Final upload of all remaining HLS files for stream %s", streamID)

	// –ü—Ä–æ—Å—Ç–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –±–µ–∑ —Ç—Ä–µ–∫–∏–Ω–≥–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
	files, err := os.ReadDir(hlsDir)
	if err != nil {
		log.Printf("‚ö†Ô∏è Error reading HLS dir for final upload: %v", err)
		return
	}

	uploadCount := 0
	for _, file := range files {
		if file.IsDir() || strings.HasSuffix(file.Name(), ".tmp") {
			continue
		}

		fileName := file.Name()
		if !strings.HasSuffix(fileName, ".m3u8") && !strings.HasSuffix(fileName, ".ts") {
			continue
		}

		localPath := filepath.Join(hlsDir, fileName)
		err := uploadToMinIO(streamID, localPath, fileName)
		if err == nil {
			uploadCount++
		}
	}

	if uploadCount > 0 {
		log.Printf("‚úÖ Final upload completed: %d files for stream %s", uploadCount, streamID)
	}
}

// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –ø–ª–µ–π–ª–∏—Å—Ç–∞ –≤ MinIO
func forceUploadPlaylist(streamID, hlsDir string) {
	playlistPath := filepath.Join(hlsDir, "stream.m3u8")

	if _, err := os.Stat(playlistPath); err == nil {
		err := uploadToMinIO(streamID, playlistPath, "stream.m3u8")
		if err != nil {
			log.Printf("Failed to force upload playlist for stream %s: %v", streamID, err)
		}
	}
}

// –ó–∞–≥—Ä—É–∑–∫–∞ HLS —Ñ–∞–π–ª–æ–≤ –≤ MinIO
// –û–±–Ω–æ–≤–∏—Ç—å uploadHLSFiles —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
// –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è uploadHLSFiles —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
func uploadHLSFiles(streamID, hlsDir string) error {
	log.Printf("üìÇ Scanning HLS directory for stream %s: %s", streamID, hlsDir)

	// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –ø–∞–ø–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
	if _, err := os.Stat(hlsDir); os.IsNotExist(err) {
		log.Printf("üìÇ HLS directory does not exist yet: %s", hlsDir)
		return nil // –ù–µ –æ—à–∏–±–∫–∞, –ø–∞–ø–∫–∞ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–ª–∞—Å—å
	}

	files, err := os.ReadDir(hlsDir)
	if err != nil {
		log.Printf("‚ùå Failed to read HLS directory %s: %v", hlsDir, err)
		return err
	}

	if len(files) == 0 {
		log.Printf("üìÇ No files in HLS directory: %s", hlsDir)
		return nil
	}

	log.Printf("üìÇ Found %d files in HLS directory %s", len(files), hlsDir)

	uploadCount := 0
	for _, file := range files {
		if file.IsDir() {
			continue
		}

		fileName := file.Name()

		// –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
		if strings.HasSuffix(fileName, ".tmp") {
			log.Printf("‚è≠Ô∏è Skipping temporary file: %s", fileName)
			continue
		}

		if !strings.HasSuffix(fileName, ".m3u8") && !strings.HasSuffix(fileName, ".ts") {
			log.Printf("‚è≠Ô∏è Skipping non-HLS file: %s", fileName)
			continue
		}

		localPath := filepath.Join(hlsDir, fileName)

		// –î–ª—è .ts —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω –ª–∏ —É–∂–µ
		if strings.HasSuffix(fileName, ".ts") {
			if isFileUploaded(streamID, fileName, localPath) {
				log.Printf("‚úÖ File already uploaded: %s", fileName)
				continue
			}
		}

		log.Printf("üì§ Uploading to MinIO: %s", fileName)

		// –î–ª—è .m3u8 –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤ –≤—Å–µ–≥–¥–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º
		err := uploadToMinIO(streamID, localPath, fileName)
		if err != nil {
			log.Printf("‚ùå Failed to upload %s: %v", fileName, err)
			continue
		}

		uploadCount++
		log.Printf("‚úÖ Successfully uploaded: %s", fileName)
	}

	if uploadCount > 0 {
		log.Printf("üìä HLS upload completed for %s: %d files uploaded", streamID, uploadCount)
	} else {
		log.Printf("üìÇ No new files to upload for stream %s", streamID)
	}

	return nil
}

// –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–≥—Ä—É–∂–µ–Ω –ª–∏ —Ñ–∞–π–ª
func isFileUploaded(streamID, fileName, localPath string) bool {
	ctx := context.Background()
	objectPath := fmt.Sprintf("%s/%s", streamID, fileName)

	localStat, err := os.Stat(localPath)
	if err != nil {
		return false
	}

	objInfo, err := minioClient.StatObject(ctx, minioBucket, objectPath, minio.StatObjectOptions{})
	if err != nil {
		return false
	}

	return objInfo.Size == localStat.Size() && !localStat.ModTime().After(objInfo.LastModified)
}

// –û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ —Å—Ç—Ä–∏–º–∞ –∏–∑ MinIO
func cleanupStreamFromMinIO(streamID string) error {
	if minioClient == nil {
		return nil
	}

	ctx := context.Background()
	objectsCh := minioClient.ListObjects(ctx, minioBucket, minio.ListObjectsOptions{
		Prefix:    streamID + "/",
		Recursive: true,
	})

	for object := range objectsCh {
		if object.Err != nil {
			log.Printf("Error listing objects for stream %s: %v", streamID, object.Err)
			continue
		}

		err := minioClient.RemoveObject(ctx, minioBucket, object.Key, minio.RemoveObjectOptions{})
		if err != nil {
			log.Printf("Failed to remove object %s: %v", object.Key, err)
		}
	}

	return nil
}

// –û—á–∏—Å—Ç–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π –ø–∞–ø–∫–∏ HLS –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏
func cleanupLocalHLSFolder(streamID string) error {
	hlsDir := filepath.Join("hls", streamID)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–∞–ø–∫–∞
	if _, err := os.Stat(hlsDir); os.IsNotExist(err) {
		log.Printf("HLS folder for stream %s does not exist, nothing to cleanup", streamID)
		return nil
	}

	// –£–¥–∞–ª—è–µ–º –≤—Å—é –ø–∞–ø–∫—É —Å–æ –≤—Å–µ–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º
	err := os.RemoveAll(hlsDir)
	if err != nil {
		return fmt.Errorf("failed to remove HLS folder %s: %v", hlsDir, err)
	}

	log.Printf("Removed local HLS folder: %s", hlsDir)
	return nil
}
