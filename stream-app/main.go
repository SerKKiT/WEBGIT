package main

import (
	"log"
	"net/http"
	"os"
	"os/signal"
	"syscall"
	"time"
	"web/stream-app/kafka"
)

var kafkaProducer *kafka.Producer

func main() {
	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MinIO
	if err := initMinIO(); err != nil {
		log.Fatalf("Failed to initialize MinIO: %v", err)
	}

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Kafka
	var err error
	kafkaProducer, err = kafka.NewProducer()
	if err != nil {
		log.Printf("Failed to initialize Kafka: %v", err)
		kafkaProducer = nil
	} else {
		log.Println("‚úÖ Kafka producer initialized successfully")
	}

	// Graceful shutdown –¥–ª—è Kafka
	c := make(chan os.Signal, 1)
	signal.Notify(c, os.Interrupt, syscall.SIGTERM)
	go func() {
		<-c
		log.Println("üõë Shutting down stream-app...")
		if kafkaProducer != nil {
			kafkaProducer.Close()
		}
		os.Exit(0)
	}()

	// –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∏–º–æ–≤ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –≥–æ—Ä—É—Ç–∏–Ω–µ
	go func() {
		time.Sleep(2 * time.Second)
		recoverActiveStreams()
	}()

	// –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ HLS –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
	//go monitorHLSActivity()

	// –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ API endpoints
	http.HandleFunc("/stream/notify", streamNotifyHandler)
	http.HandleFunc("/stream/status", streamStatusHandler)
	http.HandleFunc("/stream/recover", streamRecoveryHandler)
	http.HandleFunc("/stream/cleanup", streamCleanupHandler)

	// –ù–æ–≤—ã–µ endpoints –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Kafka
	//http.HandleFunc("/stream/start", streamStartHandler)
	//http.HandleFunc("/stream/stop", streamStopHandler)
	http.HandleFunc("/health", healthHandler)

	// –°–µ—Ä–≤–µ—Ä –æ—Ç–¥–∞—á–∏ HLS –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤ –∏ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ (—Ä–µ–∑–µ—Ä–≤–Ω—ã–π)
	http.Handle("/hls/", http.StripPrefix("/hls/", http.FileServer(http.Dir("./hls"))))

	addr := ":9090"
	log.Printf("Stream-app listening on %s\n", addr)
	if err := http.ListenAndServe(addr, nil); err != nil {
		log.Fatalf("Stream-app failed: %v", err)
	}
}
